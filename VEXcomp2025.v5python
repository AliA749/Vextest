#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
PLCHolderVision = Optical(Ports.PORT13)
distance_10 = Distance(Ports.PORT10)
FBL12_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
FBL12_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
FBL12 = MotorGroup(FBL12_motor_a, FBL12_motor_b)
FBR12_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
FBR12_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)
FBR12 = MotorGroup(FBR12_motor_a, FBR12_motor_b)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *
import time;
# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    autonomous();
    controller_1.buttonB.pressed(user_control)
    

def autonomous():
    brain.screen.print("autonomous code")
    t = time.time() + 15;
    while time.time() < t:
        clr = PLCHolderVision.color()
        dist = distance_10.object_distance(MM)
        if clr == Color.RED:#replace red with team color
            #if distance far then move
            if dist <200:#replace 200 with an actual number when conveyer is done
                brain.screen.print("grab");#replace with actual grab function
            else:
                move(FORWARD,FORWARD);
        else:
            #find closer side left/right
            clrL = PLCHolderVision.color() #left side color sense
            clrR = PLCHolderVision.color() #right side color sense
            #if left closer:
            if clrL == Color.RED:
                if clrR
                dist = distance_10.object_distance(MM)#Left side dist sense
                
            move(REVERSE,FORWARD);
            #else:
            move(FORWARD,REVERSE);

def move(L,R):
    FBL12.set_velocity(50,PERCENT)
    FBR12.set_velocity(50,PERCENT)
    FBL12.spin(L)
    FBR12.spin(R)
    wait(.5,SECONDS)
    FBL12.stop()
    FBR12.stop()

def user_control():
    brain.screen.print("user")
    # place driver control in this while loop
    while True:
        FBL12.set_velocity(controller_1.axis1.position(),PERCENT)
        FBR12.set_velocity(controller_1.axis1.position(),PERCENT)
        FBL12.spin(FORWARD)
        FBR12.spin(FORWARD)
    

# create competition instance
#comp = Competition(user_control, autonomous)
pre_autonomous()
