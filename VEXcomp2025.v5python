#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
MV1 = Optical(Ports.PORT1)
DS2 = Distance(Ports.PORT2)
LV3 = Optical(Ports.PORT3)
RV4 = Optical(Ports.PORT4)
Motors_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)
Motors_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)
Motors = MotorGroup(Motors_motor_a, Motors_motor_b)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *
import time;
# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    autonomous()
    controller_1.buttonB.pressed(user_control)
    

def autonomous():
    brain.screen.clear_row(1)
    brain.screen.next_row()
    brain.screen.print("autonomous code")
    t = time.time() + 15
    while time.time() < t:
        clrRight = RV4.color()
        clrMid = MV1.color()
        clrLeft = LV3.color()
        dist = DS2.object_distance(INCHES)
        move(FORWARD, FORWARD)
        wait(0.002,SECONDS)
        if dist<=20:
            move(REVERSE, FORWARD)
            wait(0.02,SECONDS)
            Motors.stop()
            if dist<=1.5:
                move(REVERSE, REVERSE)
                wait(0.8,SECONDS)
                Motors.stop()
        else:
            Motors.stop()
            #if clrLeft == Color.RED and LV3.is_near_object()==True:
                #brain.screen.clear_row()
                #brain.screen.next_row()
                #brain.screen.print("Move Left");
                #move(REVERSE,FORWARD);
            #elif clrRight == Color.RED and RV4.is_near_object()==True:
                #brain.screen.clear_row()
                #brain.screen.next_row()
                #brain.screen.print("Move Right");
                
                #move(REVERSE,FORWARD);
            #else:
                #move(FORWARD,REVERSE);

def move(L,R):
    Motors.set_velocity(80,PERCENT)
    Motors_motor_a.spin(L)
    Motors_motor_b.spin(R)
    if Motors_motor_a.temperature(PERCENT)>=60 or Motors_motor_b.temperature(PERCENT) >=60:
        Motors.set_velocity(45,PERCENT)
    

def user_control():
    brain.screen.print("user")
    # place driver control in this while loop
    while True:
        Motors_motor_a.set_velocity(controller_1.axis2.position(),PERCENT)
        Motors_motor_b.set_velocity(controller_1.axis3.position(),PERCENT)
        Motors_motor_a.spin(FORWARD)
        Motors_motor_b.spin(FORWARD)
    

# create competition instance
competition = Competition(user_control, autonomous)
pre_autonomous()
