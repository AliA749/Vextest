#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
controller_1 = Controller(PRIMARY)
distance_1 = Distance(Ports.PORT1)
distance_10 = Distance(Ports.PORT10)
right_motors_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)
right_motors_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
right_motors = MotorGroup(right_motors_motor_a, right_motors_motor_b)
left_motors_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
left_motors_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)
left_motors = MotorGroup(left_motors_motor_a, left_motors_motor_b)
FrontLeft = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)
FrontRight = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
#	Author:       Hillcrest Robotics software
#	Created:
#	Description: vex V5 manual code
# 
# ------------------------------------------

# Library imports
from vex import *
dead_band = 14
# Begin project code
#Arm Up-Down code
def Amovement():
    if controller_1.buttonA.pressing():
        FrontLeft.set_velocity(50,PERCENT)
        FrontLeft.spin(FORWARD)
        wait(3,MSEC)
    elif controller_1.buttonB.pressing():
        FrontRight.set_velocity(20,PERCENT)
        FrontRight.spin(FORWARD)
        wait(3,MSEC)
controller_1.buttonA.pressed(Amovement)
wait(5,MSEC)

while True:
        axis_3_pos = controller_1.axis3.position()
        axis_2_pos = controller_1.axis2.position()
        #Drive
        if abs(axis_3_pos) + abs(axis_2_pos) > dead_band:
            right_motors.spin(FORWARD)
            left_motors.spin(FORWARD)
            FrontLeft.spin(FORWARD)
            FrontRight.spin(FORWARD)
            left_motors_motor_a.set_velocity((axis_3_pos),PERCENT)
            left_motors_motor_b.set_velocity((axis_3_pos),PERCENT)
            FrontLeft.set_velocity((axis_3_pos),PERCENT)
            controller_1.screen.print(axis_3_pos)
            wait(5,MSEC)

            right_motors_motor_a.set_velocity((axis_2_pos), PERCENT)
            right_motors_motor_b.set_velocity((axis_2_pos), PERCENT)
            FrontRight.set_velocity((axis_2_pos), PERCENT)
            controller_1.screen.print(axis_2_pos)
            wait(5,MSEC)
        

        else:
            left_motors.set_velocity(0, PERCENT)
            FrontLeft.set_velocity(0, PERCENT)
            right_motors.set_velocity(0, PERCENT)
            FrontRight.set_velocity(0, PERCENT)

            left_motors_motor_a.spin(FORWARD)
            left_motors_motor_b.spin(FORWARD)
            FrontLeft.spin(FORWARD)


            right_motors_motor_a.spin(FORWARD)
            right_motors_motor_b.spin(FORWARD)
            FrontLeft.spin(FORWARD)

            wait(5, MSEC)
